/**
 * Outputs a random positive integer between 0 and and provided max number. This
 * value can be used to avoid hard-coding dummies.
 * 
 * @param max number
 * @returns number
 */
export function randomInteger(max: number): number {
  return Math.round(Math.random() * max);
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types
type Constructor<T = {}> = abstract new(...args: any[]) => T;

/**
 * Builds an extension of the provided class with an additional property called
 * `uniqueId` of type `Symbol`, which uniquely identifies a class instance. 
 * This can help create test doubles that don't incur in false positives in 
 * matchers that check for equality rather than identity of objects. 
 * 
 * Example:
 * 
 * `const mockInstance = new (Identified(MockUser))();`
 * 
 * @param BaseClass Constructor
 * @returns ConcreteConstructor
 */
// eslint-disable-next-line @typescript-eslint/ban-types
export function Identified<C extends Constructor>(BaseClass: C) {
  abstract class UniqueClass extends BaseClass {
    public readonly uniqueId = Symbol();
  }

  return UniqueClass;
}

/**
 * A stub object of class T is expected to have all members of class T plus a
 * unique identifyer `uniqueId` of type symbol.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
export type Stub<T extends {}> = T & { readonly uniqueId: symbol };

/**
 * Test stubs can be generated by classes with this static signature.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
export type StubClass<T extends {}> = {
  createStub: () => Stub<T>;
};
