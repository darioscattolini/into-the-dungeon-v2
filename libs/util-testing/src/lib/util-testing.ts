/**
 * Generates a random positive integer that can be used to avoid hard-coding 
 * dummies.
 * 
 * @param {number} max Upper boundary of range from which integer will be picked
 * @param {boolean} [ceil=true] True by default. Setting it to false excludes
 * `max` from possible outputs, allowing the use of an array's length to get 
 * a random index
 * @returns {number} Random integer between 0 and `max`
 */
export function randomInteger(max: number, ceil = true): number {
  let integer = Math.round(Math.random() * max);

  if (!ceil && integer === max && integer !== 0) integer--;

  return integer;
}

/**
 * Outputs a random string that can be used to avoid hard-coding dummies.
 * 
 * @param {number} length Length of returned string
 * @returns {string} String consisting only of uppercase, lowercase and number 
 * characters.
 */
export function randomString(length: number): string {
  const allowedCharacters 
    = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const allowedCharactersAmount = allowedCharacters.length;

  let randomString = '';
  
  for (let i = 0; i < length; i++ ) {
    const charIndex = randomInteger(allowedCharactersAmount, false);
    randomString += allowedCharacters.charAt(charIndex);
 }
  return randomString;
}


/**
 * A general type for any class
 * 
 * @typedef {function} Constructor
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types
type Constructor<T = {}> = abstract new(...args: any[]) => T;

/**
 * Extends a class so that instances are uniquely identified. This can help 
 * create test doubles that don't incur in false positives in matchers that 
 * check for equality rather than identity of objects. 
 * 
 * @param {Constructor} BaseClass Abstract or concrete class
 * @returns {Constructor} `BaseClass` extended with property `uniqueId` of type 
 * `Symbol`
 */
export function Identified<C extends Constructor>(BaseClass: C) {
  abstract class UniqueClass extends BaseClass {
    public readonly uniqueId = Symbol();
  }

  return UniqueClass;
}

/**
 * A test double of an object of class T is expected to have all members of 
 * class T plus a unique identifyer `uniqueId` of type symbol.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
export type TestDouble<T extends {}> = T & { readonly uniqueId: symbol };

/**
 * Test doubles can be generated by classes with this static signature.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
export type TestDoubleClass<T extends {}> = {
  createDouble: () => TestDouble<T>;
};
