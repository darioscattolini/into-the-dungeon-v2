/**
 * Outputs a random positive integer between 0 and and provided max number. This
 * value can be used to avoid hard-coding dummies.
 * 
 * @param max number
 * @returns number
 */
export function randomInteger(max: number): number {
  return Math.round(Math.random() * max);
}

/**
 * Outputs a random string of specified length, using only uppercase, lowercase
 * and number characters. This value can be used to avoid hard-coding dummies.
 * 
 * @param length number
 * @returns string
 */
export function randomString(length: number): string {
  const allowedCharacters 
    = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const allowedCharactersAmount = allowedCharacters.length;

  let randomString = '';
  
  for (let i = 0; i < length; i++ ) {
    const charIndex = Math.floor(Math.random() * allowedCharactersAmount);
    randomString += allowedCharacters.charAt(charIndex);
 }
  return randomString;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types
type Constructor<T = {}> = abstract new(...args: any[]) => T;

/**
 * Builds an extension of the provided class with an additional property called
 * `uniqueId` of type `Symbol`, which uniquely identifies a class instance. 
 * This can help create test doubles that don't incur in false positives in 
 * matchers that check for equality rather than identity of objects. 
 * 
 * Example:
 * 
 * `const mockInstance = new (Identified(MockUser))();`
 * 
 * @param BaseClass Constructor
 * @returns ConcreteConstructor
 */
// eslint-disable-next-line @typescript-eslint/ban-types
export function Identified<C extends Constructor>(BaseClass: C) {
  abstract class UniqueClass extends BaseClass {
    public readonly uniqueId = Symbol();
  }

  return UniqueClass;
}

/**
 * A test double of an object of class T is expected to have all members of 
 * class T plus a unique identifyer `uniqueId` of type symbol.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
export type TestDouble<T extends {}> = T & { readonly uniqueId: symbol };

/**
 * Test doubles can be generated by classes with this static signature.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
export type TestDoubleClass<T extends {}> = {
  createDouble: () => TestDouble<T>;
};
